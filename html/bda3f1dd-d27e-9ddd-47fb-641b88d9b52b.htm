<!DOCTYPE html >
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" href="../css/bulma.css" />
    <link rel="stylesheet" href="../css/font-awesome.min.css" />
    <link rel="stylesheet" href="../css/presentationStyle.css" />
    <link rel="stylesheet" href="../css/vs.min.css" />
    <script src="../scripts/jquery-3.5.1.min.js"></script>
    <script src="../scripts/clipboard.min.js"></script>
    <script src="../scripts/highlight.min.js"></script>
    <script src="../scripts/presentationStyle.js"></script>
    <title>PrePostProcessor Class</title>
    <meta name="Title" content="PrePostProcessor" />
    <meta name="Help.Id" content="T:OpenVinoSharp.preprocess.PrePostProcessor" />
    <meta name="Help.ContentType" content="Reference" />
    <meta name="container" content="OpenVinoSharp.preprocess" />
    <meta name="guid" content="bda3f1dd-d27e-9ddd-47fb-641b88d9b52b" />
    <meta name="Description" content="Main class for adding pre- and post- processing steps to existing ov::Model" />
    <meta name="tocFile" content="../toc/IDDA.xml" />
  </head>
  <body>
    <div class="fixedLayout">
      <div id="Header" class="fixedHeader">
        <div class="pageHeader level mb-0 py-2 px-4">
          <div id="TitleContainer" class="level-left">
            <div id="DocumentationTitle" class="level-item">OpenVINO C# API Documented</div>
          </div>
          <div id="LangFilterSearchContainer" class="level-right">
            <div class="level-item">
              <div class="dropdown is-hoverable">
                <div class="dropdown-trigger">
                  <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span id="CurrentLanguage"></span>
                    <span class="icon is-small">
                      <i class="fa fa-angle-down" aria-hidden="true"></i>
                    </span>
                  </button>
                </div>
                <div class="dropdown-menu" role="menu">
                  <div id="LanguageSelections" class="dropdown-content">
                    <a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a>
                  </div>
                </div>
              </div>
            </div>
            <div class="level-item">
              <form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;">
                <div class="field">
                  <div class="control has-icons-left">
                    <input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" />
                    <span class="icon is-small is-left">
                      <i class="fa fa-search"></i>
                    </span>
                    <button id="SearchButton" type="submit" class="is-hidden"></button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="fixedContent">
        <div id="HeaderPrelimContainer" class="level my-1 px-2">
          <div id="HeaderTextContainer" class="level-left">
            <div class="level-item">
              <span class="has-text-grey-light">Please use. NET 5,. NET 6, NET 7,. NET 8, NET Framework 4.6, NET Framework 4.61, NET Framework 4.7, NET Framework 4.72, NET Framework 4.8, NET Framework 4.81, and. NET Core 3.1 versions</span>
            </div>
          </div>
        </div>
        <nav class="breadcrumb my-1 px-2 border-bottom" role="navigation">
          <ul id="TopicBreadcrumbs" />
        </nav>
        <div id="ContentContainer" class="columns pl-5 pr-5 fixedContent">
          <div id="ShowHideTOCColumn" class="column is-hidden-tablet">
            <a id="ShowHideTOC">Show/Hide TOC</a>
          </div>
          <div id="TOCColumn" class="column is-hidden-mobile">
            <nav class="toc">
              <ul id="TableOfContents" class="toc-menu" />
            </nav>
          </div>
          <div id="Resizer" class="is-hidden"></div>
          <div id="TopicContent" class="column content is-7">
            <h1>Pre<wbr />Post<wbr />Processor Class</h1>
            <div class="summary">
             Main class for adding pre- and post- processing steps to existing ov::Model
             </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Definition</h2>
            <div id="IDBSection">
              <strong>Namespace:</strong> <a href="7f998fed-f90c-a3b4-c971-bde122ff758e.htm">OpenVinoSharp.preprocess</a><br /><strong>Assembly:</strong> OpenVINO_CSharp_API (in OpenVINO_CSharp_API.dll) Version: 2024.3.0.2+a9617c0f8f80882646d0eba11b88ae6cb17b3fb8<div class="codeSnippet"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">PrePostProcessor</span> : <span class="identifier">IDisposable</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><span class="noLink">Object</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">PrePostProcessor</span></dd></dl><dl class="implementsList"><dt>Implements</dt><dd><span class="noLink">IDisposable</span></dd></dl></div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Remarks</h2>
            <div id="IDBCSection">
             This is a helper class for writing easy pre- and post- processing operations on ov::Model object assuming that
             any preprocess operation takes one input and produces one output.
            
             For advanced preprocessing scenarios, like combining several functions with multiple inputs/outputs into one,
             client's code can use transformation passes over ov::Model
             </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Constructors</h2>
            <div id="IDBFASection">
              <table id="ConstructorList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="01a44341-8ebe-fe52-26fb-78bf75d5a993.htm">PrePostProcessor</a>
                  </td>
                  <td>
            Default construction through Model.
            </td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Properties</h2>
            <div id="IDHFASection">
              <table id="PropertyList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="199791da-c18d-044b-78bc-1b847d9b0f4d.htm">Ptr</a>
                  </td>
                  <td>
            [public]PrePostProcessor class pointer.
            </td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Methods</h2>
            <div id="IDCFASection">
              <table id="MethodList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="c18024f8-d399-5ba7-beb7-26fa86e91f37.htm">build</a>
                  </td>
                  <td>
            Adds pre/post-processing operations to function passed in constructor
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="86e43843-ddc4-5fdf-82a7-c775d55b1ed0.htm">Dispose</a>
                  </td>
                  <td>
            Release unmanaged resources
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="7d915d0d-fcfe-b991-f4f1-788a37ec813f.htm">Finalize</a>
                  </td>
                  <td>
            Default destructor
            <br />(Overrides <span class="noLink">Object<span id="LSTCE9ACC9_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Finalize<span id="LSTCE9ACC9_1" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></span>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="0fce6c3e-1333-3601-32f1-00bc1a8a7afa.htm">input<span id="LSTCE9ACC9_2" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>
                  </td>
                  <td>
            Gets input pre-processing data structure. Should be used only if model/function has only one input
            Using returned structure application's code is able to set user's tensor data (e.g layout), preprocess steps,
            target model's data
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="8ac3c4ff-bf23-666c-6ad2-4075ee809309.htm">input(String)</a>
                  </td>
                  <td>
            Gets input pre-processing data structure for input identified by it's tensor name
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="bf729f27-206b-f44e-e12d-a95512394c49.htm">input(UInt64)</a>
                  </td>
                  <td>
            Gets input pre-processing data structure for input identified by it's order in a model
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="67cb7d96-426e-a955-8e4e-9ccf7a1ab5cd.htm">output<span id="LSTCE9ACC9_3" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>
                  </td>
                  <td>
            Gets output post-processing data structure. Should be used only if model/function has only one output
            Using returned structure application's code is able to set model's output data, post-process steps, user's
            tensor data (e.g layout)
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="e203f376-2c50-ac45-cf93-adaeca47f637.htm">output(String)</a>
                  </td>
                  <td>
            Gets output post-processing data structure for output identified by it's tensor name
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="5f2df2f1-c2d1-df34-f5d0-c1d353ae45aa.htm">output(UInt64)</a>
                  </td>
                  <td>
            Gets output post-processing data structure for output identified by it's order in a model
            </td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Fields</h2>
            <div id="IDAFASection">
              <table id="FieldList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="f4cc4730-5f69-8b93-0d84-4fb2a2a227c6.htm">m_ptr</a>
                  </td>
                  <td>
            [private]PrePostProcessor class pointer.
            </td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>See Also</h2>
            <div id="seeAlsoSection">
              <h4>Reference</h4>
              <div>
                <a href="7f998fed-f90c-a3b4-c971-bde122ff758e.htm">OpenVinoSharp.preprocess Namespace</a>
              </div>
            </div>
          </div>
          <div id="InThisArticleColumn" class="column is-hidden-mobile">
            <nav class="menu sticky is-hidden">
              <p class="menu-label">
                <strong>In This Article</strong>
              </p>
              <ul id="InThisArticleMenu" class="menu-list">
                <li>
                  <a class="quickLink">Definition</a>
                </li>
                <li>
                  <a class="quickLink">Remarks</a>
                </li>
                <li>
                  <a class="quickLink">Constructors</a>
                </li>
                <li>
                  <a class="quickLink">Properties</a>
                </li>
                <li>
                  <a class="quickLink">Methods</a>
                </li>
                <li>
                  <a class="quickLink">Fields</a>
                </li>
                <li>
                  <a class="quickLink">See Also</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
      <footer id="PageFooter" class="footer border-top py-3 fixedFooter">
        <div class="columns">
          <div class="column">Copyright © 2024 Yan Guojin OpenVINO C# API. All rights reserved.<p><a href="https://github.com/guojin-yan/OpenVINO-CSharp-API" target="_blank" rel="noopener noreferrer">Copyright © 2024 Yan Guojin OpenVINO C# API. All rights reserved.</a></p> 
				</div>
          <div class="column"> 
				</div>
        </div>
      </footer>
    </div>
    <script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script>
  </body>
</html>